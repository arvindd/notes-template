#+title: README
#+startup: indent
#+startup: showall
#+category: notes
#+type: docs
#+draft: false

* Introduction
  This template is for creating org-mode notes system on your own local computer. Optionally, it also allows you to publicly share your notes on the internet via a [[https://gohugo.io/][hugo]]-generated static website.

* How to set something similar to this for yourself?
  If you plan to use emacs for all your notes, first of all, clone [[https://github.com/arvindd/.emacs.d][.emacd.d]] in your home directory. This sets up the basic settings for all the notes.

  Now, use the "Use this template" button to first make a repository in your own github account, and clone that repo into to your local machine (eg: ~/notes).

  Note that we do not need any installation of hugo and related software if we are only needing to work with the notes (read, change, add, etc.). Hugo is only needed for posting a public version of the notes.

* Where are the notes?
  In the notes repo that you cloned above, the actual notes are in the "content" in the root of your notes repo. All the notes in that directory are org-mode files, just as this file.

  Every folder inside content (and in all sub-directories) there is an _index.org file - this is the index file for each directory. THe directories form sections, and each file is a note in that section.

  Using org-mode makes it easy to manage notes with emacs. Of course, if you prefer to use markdown files, you could do so too - the choice is entirely yours.

* The .notes folder
  The emacs settings you cloned above, however, does not assume a hugo site. This is to make sure that notes remain independent of hugo - and can be used even without hugo.

  Emacs assumes all notes are in the ~/.notes folder - i.e., .notes folder in your home directory.

  Therefore, in order to simply use emacs in the org-mode for all your notes, you need to create a symbolic link .notes that points to the notes/content folder above.

  On Linux / WSL, from the home directory, this is done with:

  #+begin_src
  ln -s <path-to-notes>/content .notes
  #+end_src

  On Windows, from the home directory, this is done on powershell with:

  #+begin_src
  cmd /c mklink /d .notes <path-to-notes>/content
  #+end_src

  On Windows, from the home directory, this is done on command prompt with:

  #+begin_src
  mklink /d .notes <path-to-notes>/content
  #+end_src

* Installation of tools
  As mentioned above, if our sole purpose is to maintain a local version of the notes, we do not need any of the tools - including hugo, go, git, etc. We need all these tools only for building a public version of the notes.

  If you want to also check the version of notes locally using hugo-generated site, install all the tools now.

  First, finish installation of hugo and its pre-requisites following [[https://notes.ramdoot.in/hugo][this guide]]. Since this notes uses [[https://www.docsy.dev/][docsy theme]], it also has another prerequisite - nodejs. Install all that following [[https://notes.ramdoot.in/nodejs][this guide]].

  For building the hugo site for the notes, we also need additional pre-requisite npm packages. Install these too:

  #+begin_src
  npm install -D autoprefixer
  npm install -D postcss-cli
  npm install -D postcss
  #+end_src

* If you use emacs org-mode for your notes...
** Public vs private notes
   You can do this if you use emacs org-mode for your notes.

   When a new note file is created using emacs org-mode, on default, the file is created with a front-matter as "#+draft: true". With this value for draft, the file remains as a private note, and will be seen only when logged into your own notes repo in github.

   To make the note as a public note, i.e., accessible using your hosting domain, make the front-matter as "#+draft: false" - and this becomes public.

   Note that you need one of the following for having private notes:
   - A FREE account in hosting providers such as [[https://www.netlify.com/][netlify]] for hosting your static website, but still able to keep your github repo private. Netlify can generate hugo sites automatically when you push your notes to your private repo in github.
   - A github enterprise or a paid github pro/teams so that you can have [[https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages][github pages]] for private repo

** Hiding parts of a public note
   An entire subsection of a note can be hid from the public note by tagging it with a "noexport" tag. In emacs-org mode, tags can be added by using =C-c <tag name>=.

** Including simple images using emacs picture mode
Of course, since you are using emacs org-mode, you could simply add an inline image using the usual image syntax for org-mode: ~[[link]]~.

Other way to draw quick (but simple) images in emacs is by using the picture mode. For example, a simple explanation such as this could easily be done using picture mode:

#+name: example ascii picture
#+begin_src ditaa :file img/quad.png :exports both

                  Types of quadrilaterals

                                             +-------------+
   +----------------------+                  |             |
   |                      |                  |             |
   |      Rectangle       |                  |   Square    |
   |                      |                  |             |
   +----------------------+                  |             |
                                             +-------------+

#+end_src


What you see above are some drawings done simply using normal ascii characters - and embedded in a source-code block (i.e., between ~#+begin_src~ and ~#+end_src~. When done so, hugo simply puts these in pre-formatted HTML blocks so that they will look exactly the way they look within an emacs. The same result could have also been achieved with example blocks with delimiters ~#+begin_example~ and ~#+end_example~.

However, if you use hugo to plavce your notes in a publicly accessible location, it makes sense to actually have a picture drawn and exported as actual png file so that it looks natural when seen via a browser. Our friend to do that is via [[https://github.com/stathissideris/ditaa][ditaa]] - a small command line program that converts such ascii figures as above into real looking pictures. You will have to do it by embedding the block above using a source-code block as follows:

#+begin_example
#+​begin_src ditaa :file img/quad.png :exports results

<put your ascii drawing here (emacs picture may help you for difficult drawings)

#+​end_src
#+end_example

What you see above is a ditaa source code block, with the file name specified as img/quad.png (this is where ditaa will create the png file when the above source code block is executed with ~C-c C-c~). The ~:exports results~ will make sure that the original ascii block is not shown on your webpage, and only the "results" of execution of the source code block (in this case, your png image created after ditaa is invoked using ~C-c C-c~) is shown. When executed, results appear as follows:

#+begin_example
#+RESULTS
[[img/quad.png]]
#+end_example

One important thing that *you should do* is to change the link to the image in the ~#+RESULTS~ above to be an absolute link (i.e., prefix that with a ~/~ - so that it is accessible on the web. Non-absolute paths would be relative to the root of the notes folder - so might not be seen when rendered on your web. In this case, change the link to: ~[[/img/quad.png]]~ - note the ~/~ prefix.

When done this way, the above picture will be shown on your results location as follows (note that you can also move your results anywhere in your notes by adding a ~#+name:~ to your source code block):

#+RESULTS: example ascii picture
[[img/quad.png]]

* Disallowing robots to crawl your site
On default, public sites generated by hugo are crawled by search-engine bots like google or bing. In order to stop crawlers that honour robots.txt, create this file: =/layouts/robots.txt=. The file should contain this:

#+begin_example
User-agent: *
{{ range .Pages }}
Disallow: {{ .RelPermalink }}
{{ end }}
#+end_example

This will make hugo generate robots.txt in the root of the generated site with the above contents. This content basically requests crawlers not to crawl any page in the generated site - and all those crawlers that honor robots.txt (such as google and bing) will not crawl your generated site.
